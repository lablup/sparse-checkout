name: 'Sparse checkout action'
description: 'Sparse checkout a git repository'
branding:
  icon: 'minimize-2'
  color: 'gray-dark'
inputs:
  # Sparse checkout
  patterns:
    description: >
      Write a set of patterns to the sparse-checkout file.

      [Learn more about set](https://git-scm.com/docs/git-sparse-checkout#Documentation/git-sparse-checkout.txt-emsetem)
    required: true

  # Same as actions/checkout
  repository:
    description: 'Repository name with owner. For example, snow-actions/sparse-checkout'
    default: ${{ github.repository }}
    required: false

  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    default: ''
    required: false

  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.

      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.

      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
    required: false

  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    default: '.'
    required: false
  filter:
    description: > 
      Use the partial clone feature and request that the server sends a subset of reachable objects according to a given object filter.
    default: ''
    required: false
runs:
  using: composite
  steps:
    - name: Setting up git credential
      uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://git:${{ inputs.token }}@github.com

    - name: Preparing the target directory
      run: |
        echo "::group::Preparing the target clone directory..."
        if [ -n "$DIRECTORY" ]; then
          mkdir -p $DIRECTORY
        fi
        echo "::endgroup::"
        echo "::group::Git version info"
        git version
        echo "::endgroup::"
      env:
        DIRECTORY: ${{ inputs.path }}
      shell: bash

    - name: Initializing the repository
      run: |
        echo "::group::Initializing the repository"
        $GIT init
        $GIT remote add origin ${GITHUB_SERVER_URL/https:\/\//https:\/\/x-access-token:${TOKEN}@}/${REPOSITORY}
        $GIT remote -v
        echo "::endgroup::"
      env:
        REPOSITORY: ${{ inputs.repository }}
        TOKEN: ${{ inputs.token }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - name: Disabling automatic garbage collection
      run: |
        echo "::group::Disabling automatic garbage collection"
        $GIT config --local gc.auto 0
        echo "::endgroup::"
      working-directory: ${{ inputs.path }}
      shell: bash

    - name: Setting up sparse checkout
      run: |
        echo "::group::Setting up sparse checkout"
        echo "$PATTERNS"
        $GIT sparse-checkout init --cone
        $GIT sparse-checkout set $PATTERNS
        # To checkout PR merge commits auto-generated by GitHub,
        # map their refspec pattern to valid branch names.
        $GIT config --local --add remote.origin.fetch '+refs/pull/*/merge:refs/remotes/origin/pr-merge/*'
        echo "::endgroup::"
        echo "::group::Checking out the ref"
        echo "repo: $REPOSITORY"
        if [ -z "$REF" ]; then
          echo "ref: $GITHUB_REF (auto)"
          if [ "$REPOSITORY" == "$GITHUB_REPOSITORY" ]; then
            # Convert refspec to branch names.
            [[ $GITHUB_REF =~ ^refs/pull/([[:digit:]]+)/merge$ ]] && BRANCH=${GITHUB_REF/${BASH_REMATCH[0]}/pr-merge/${BASH_REMATCH[1]}}
            [[ $GITHUB_REF =~ ^refs/heads/(.+)$ ]] && BRANCH=${GITHUB_REF/${BASH_REMATCH[0]}/${BASH_REMATCH[1]}}
            [[ -z $BRANCH ]] && BRANCH=$REF
          else
            # TODO: support customization of the ref in remote repos
            BRANCH=$(gh api repos/$REPOSITORY --jq '.default_branch')
          fi
        else
          echo "ref: $REF (configured)"
          [[ $REF =~ ^refs/pull/([[:digit:]]+)/merge$ ]] && BRANCH=${REF/${BASH_REMATCH[0]}/pr-merge/${BASH_REMATCH[1]}}
          [[ $REF =~ ^refs/heads/(.+)$ ]] && BRANCH=${REF/${BASH_REMATCH[0]}/${BASH_REMATCH[1]}}
          [[ -z $BRANCH ]] && BRANCH=$REF
        fi
        echo "branch: $BRANCH"
        FILTER_ARG="--no-filter"
        if [ -n "$FILTER" ]; then
          FILTER_ARG="--filter=$FILTER"
        fi
        $GIT -c protocol.version=2 fetch --no-tags --prune --progress "$FILTER_ARG" --depth=1 origin +${REF}:refs/remotes/origin/${REF}
        $GIT checkout --force -B "$BRANCH" "refs/remotes/origin/$BRANCH"
        echo "::endgroup::"
        echo "::group::Logging the commit SHA"
        $GIT log -1 --format='%H'
        echo "::endgroup::"
      env:
        REF: ${{ inputs.ref }}
        REPOSITORY: ${{ inputs.repository }}
        PATTERNS: ${{ inputs.patterns }}
        FILTER: ${{ inputs.filter }}
      working-directory: ${{ inputs.path }}
      shell: bash
